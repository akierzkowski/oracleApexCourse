-- create tables

create table users (
    id                number generated by default on null as identity
                      constraint users_id_pk primary key,
    login             varchar2(255 char) not null,
    email             varchar2(255 char) not null,
    first_name        varchar2(255 char),
    last_name         varchar2(255 char),
    date_of_birth     date,
    weight            number,
    height            number,
    gender            varchar2(4000 char) constraint users_gender_ck
                      check (gender in ('M','F')),
    image             blob,
    image_filename    varchar2(255 char),
    image_mimetype    varchar2(255 char),
    image_charset     varchar2(255 char),
    image_lastupd     date,
    created           date not null,
    created_by        varchar2(255 char) not null,
    updated           date not null,
    updated_by        varchar2(255 char) not null
);



create table meal_types (
    id            number generated by default on null as identity
                  constraint meal_types_id_pk primary key,
    user_id       number                  constraint meal_types_user_id_fk
                  references users,
    name          varchar2(255 char) not null,
    hour          number not null,
    minutes       number not null,
    created       date not null,
    created_by    varchar2(255 char) not null,
    updated       date not null,
    updated_by    varchar2(255 char) not null
);

-- table index
create index meal_types_i1 on meal_types (user_id);



create table units (
    id             number generated by default on null as identity
                   constraint units_id_pk primary key,
    name           varchar2(255 char) not null,
    description    varchar2(4000 char),
    created        date not null,
    created_by     varchar2(255 char) not null,
    updated        date not null,
    updated_by     varchar2(255 char) not null
);



create table allergens (
    id             number generated by default on null as identity
                   constraint allergens_id_pk primary key,
    name           varchar2(255 char) not null,
    description    varchar2(4000 char),
    created        date not null,
    created_by     varchar2(255 char) not null,
    updated        date not null,
    updated_by     varchar2(255 char) not null
);



create table ingredient_types (
    id                    number generated by default on null as identity
                          constraint ingredient_types_id_pk primary key,
    ingredient_type_id    number,
    name                  varchar2(255 char) not null,
    created               date not null,
    created_by            varchar2(255 char) not null,
    updated               date not null,
    updated_by            varchar2(255 char) not null
);

-- table index
create index ingredient_types_i1 on ingredient_types (ingredient_type_id);



create table ingredients (
    id                        number generated by default on null as identity
                              constraint ingredients_id_pk primary key,
    user_id                   number                              constraint ingredients_user_id_fk
                              references users,
    type_id                   number                              constraint ingredients_type_id_fk
                              references ingredient_types not null,
    name                      varchar2(255 char) not null,
    description               varchar2(4000 char),
    kcal_per_100g             number,
    protein_per_100g          number,
    carbo_per_100g            number,
    fat_per_100g              number,
    is_meat                   varchar2(1 char)
                              constraint ingredients_is_meat check (is_meat in ('Y','N')),
    is_animal_origin          varchar2(1 char)
                              constraint ingredients_is_animal_origin check (is_animal_origin in ('Y','N')),
    brand                     varchar2(4000 char),
    available_only_in_shop    varchar2(4000 char) constraint ingredients_available_only_in_shop_ck
                              check (available_only_in_shop in ('Y','N')),
    image                     blob,
    image_filename            varchar2(255 char),
    image_mimetype            varchar2(255 char),
    image_charset             varchar2(255 char),
    image_lastupd             date,
    created                   date not null,
    created_by                varchar2(255 char) not null,
    updated                   date not null,
    updated_by                varchar2(255 char) not null
);

-- table index
create index ingredients_i1 on ingredients (user_id);

create index ingredients_i2 on ingredients (type_id);



create table ingredients_units (
    id               number generated by default on null as identity
                     constraint ingredients_units_id_pk primary key,
    ingredient_id    number not null,
    unit_id          number not null,
    gram_per_unit    number not null,
    created          date not null,
    created_by       varchar2(255 char) not null,
    updated          date not null,
    updated_by       varchar2(255 char) not null
);



create table ingredients_allergens (
    id               number generated by default on null as identity
                     constraint ingredients_allergens_id_pk primary key,
    ingredient_id    number                     constraint ingredients_allergens_ingredient_id_fk
                     references ingredients,
    allergen_id      number                     constraint ingredients_allergens_allergen_id_fk
                     references allergens,
    created          date not null,
    created_by       varchar2(255 char) not null,
    updated          date not null,
    updated_by       varchar2(255 char) not null
);

-- table index
create index ingredients_allergens_i1 on ingredients_allergens (ingredient_id);

create index ingredients_allergens_i2 on ingredients_allergens (allergen_id);



create table recipes (
    id                         number generated by default on null as identity
                               constraint recipes_id_pk primary key,
    user_id                    number                               constraint recipes_user_id_fk
                               references users,
    name                       varchar2(255 char) not null,
    recipe_description         varchar2(4000 char),
    preparation_description    varchar2(4000 char),
    preparation_time           number,
    created                    date not null,
    created_by                 varchar2(255 char) not null,
    updated                    date not null,
    updated_by                 varchar2(255 char) not null
);

-- table index
create index recipes_i1 on recipes (user_id);



create table recipes_images (
    id                number generated by default on null as identity
                      constraint recipes_images_id_pk primary key,
    recipe_id         number not null,
    image             blob,
    image_filename    varchar2(255 char),
    image_mimetype    varchar2(255 char),
    image_charset     varchar2(255 char),
    image_lastupd     date,
    created           date not null,
    created_by        varchar2(255 char) not null,
    updated           date not null,
    updated_by        varchar2(255 char) not null
);



create table rating (
    id             number generated by default on null as identity
                   constraint rating_id_pk primary key,
    recipe_id      number not null,
    user_id        number not null,
    rating         number constraint rating_rating_bet
           check (rating between 1 and 10),
    the_comment    varchar2(4000 char),
    created        date not null,
    created_by     varchar2(255 char) not null,
    updated        date not null,
    updated_by     varchar2(255 char) not null
);



create table recipes_ingredients (
    id               number generated by default on null as identity
                     constraint recipes_ingredients_id_pk primary key,
    recipe_id        number not null,
    ingredient_id    number not null,
    unit_id          number not null,
    amount           number not null,
    created          date not null,
    created_by       varchar2(255 char) not null,
    updated          date not null,
    updated_by       varchar2(255 char) not null
);



alter table ingredient_types add constraint ingredient_types_ingredient_type_id_fk foreign key (ingredient_type_id) references ingredient_types;

-- triggers
create or replace trigger users_biu
    before insert or update
    on users
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end users_biu;
/


create or replace trigger meal_types_biu
    before insert or update
    on meal_types
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end meal_types_biu;
/


create or replace trigger units_biu
    before insert or update
    on units
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end units_biu;
/


create or replace trigger allergens_biu
    before insert or update
    on allergens
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end allergens_biu;
/


create or replace trigger ingredient_types_biu
    before insert or update
    on ingredient_types
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end ingredient_types_biu;
/


create or replace trigger ingredients_biu
    before insert or update
    on ingredients
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end ingredients_biu;
/


create or replace trigger ingredients_units_biu
    before insert or update
    on ingredients_units
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end ingredients_units_biu;
/


create or replace trigger ingredients_allergens_biu
    before insert or update
    on ingredients_allergens
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end ingredients_allergens_biu;
/


create or replace trigger recipes_biu
    before insert or update
    on recipes
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end recipes_biu;
/


create or replace trigger recipes_images_biu
    before insert or update
    on recipes_images
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end recipes_images_biu;
/


create or replace trigger rating_biu
    before insert or update
    on rating
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end rating_biu;
/


create or replace trigger recipes_ingredients_biu
    before insert or update
    on recipes_ingredients
    for each row
begin
    if inserting then
        :new.created := sysdate;
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
    end if;
    :new.updated := sysdate;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
end recipes_ingredients_biu;
/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "V_RECIPE_INGREDIENTS_KCAL" ("ID", "RECIPE_ID", "INGREDIENT_ID", "UNIT_ID", "INGREDIENT", "UNIT", "AMOUNT", "GRAM", "KCAL") AS 
  with recipe_ingredients_gram as (
    select
        ri.id,
        ri.recipe_id,
        ri.ingredient_id,
        ri.unit_id,
        i.name as ingredient, 
        u.name as unit,
        ri.amount as amount, 
        case
            when ri.unit_id is null then ri.amount
            else ri.amount * iu.gram_per_unit
        end as gram,
        i.kcal_per_100g 
    from 
        recipes_ingredients ri
    left join ingredients_units iu on 
        ri.unit_id = iu.unit_id
		and ri.ingredient_id = iu.ingredient_id
    left join units u on
        iu.unit_id = u.id
    left join ingredients i on
        ri.ingredient_id = i.id
)
select 
    id,
    recipe_id,
    ingredient_id,
    unit_id,
    ingredient, 
    unit,
    amount, 
    gram,
    gram/100*kcal_per_100g as kcal
from 
    recipe_ingredients_gram
;
/

-- Generated by Quick SQL 1.2.9 30.10.2024, 12:06:46

/*
users /auditcols
    id 
    login vc(255) /nn
    email /nn
    first_name
    last_name
    date_of_birth
    weight num
    height num
    gender /check M,F
    image file

meal_types /auditcols
    id
    user_id /fk users 
    name /nn
    hour num /nn
    minutes num /nn

units /auditcols
    id
    name /nn
    description 

allergens /auditcols
    id
    name /nn
    description 

ingredient_types /auditcols
    id  
    ingredient_type_id
    name /nn

ingredients /auditcols
    user_id
    id
    name /nn
    description
    type_id /fk ingredient_types /nn
    kcal_per_100g num
    protein_per_100g num
    carbo_per_100g num
    fat_per_100g num
    is_meat
    is_animal_origin       
    brand
    available_only_in_shop /check Y,N
    image file

ingredients_units /auditcols
    ingredient_id /nn
    unit_id /nn
    id
    gram_per_unit num /nn

ingredients_allergens /auditcols
    ingredient_id
    allergen_id
    id

recipes /auditcols
    user_id
    id 
    name /nn
    recipe_description
    preparation_description
    preparation_time  num

recipes_images /auditcols
    recipe_id /nn
    id
    image file

rating /auditcols
    recipe_id /nn
    user_id /nn
    id
    rating num /between 1 and 10
    the_comment

recipes_ingredients /auditcols
    recipe_id /nn
    ingredient_id /nn
    unit_id /nn
    amount num /nn

 Non-default options:
# settings = {"apex":"Y","db":"19c","pk":"IDENTITY"}

*/